services:
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile.dev
    container_name: expertmind-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_HOST=0.0.0.0
      - VITE_PORT=5173
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - /app/node_modules
      - /app/apps/frontend/node_modules
    networks:
      - expertmind
    depends_on:
      - backend
    restart: unless-stopped
    command: npm run dev --workspace=apps/frontend -- --host 0.0.0.0

  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: expertmind-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - AGNO_API_URL=http://agent-api:8000
      - AGNO_DEFAULT_AGENT_ID=agno_assist
      - AGNO_API_TIMEOUT=60000
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - MONGODB_URI=mongodb://backend:backend@backend-mongodb:27017/expertmind?authSource=admin
    volumes:
      - ./apps/backend:/app/apps/backend
      - backend_node_modules:/app/node_modules
      - backend_app_node_modules:/app/apps/backend/node_modules
    networks:
      - expertmind
    depends_on:
      agent-api:
        condition: service_healthy
      backend-mongodb:
        condition: service_healthy
    restart: unless-stopped

  backend-mongodb:
    image: mongo:7
    container_name: expertmind-backend-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: backend
      MONGO_INITDB_ROOT_PASSWORD: backend
      MONGO_INITDB_DATABASE: expertmind
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./apps/backend/mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - expertmind
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: mongod --auth

  agent-api:
    build:
      context: ./apps/agent-api
      dockerfile: Dockerfile
    container_name: expertmind-agent-api
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=agent_api
      - DB_USER=postgres
      - DB_PASS=postgres
      - DOCS_ENABLED=true
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:3001","http://localhost:5173","https://app.agno.com"]
    volumes:
      - ./apps/agent-api:/app
    networks:
      - expertmind
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: python -m uvicorn api.main:app --host 0.0.0.0 --port 8000

  postgres:
    image: agnohq/pgvector:16
    container_name: expertmind-agent-api-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER:-ai}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ai}
      POSTGRES_DB: ${DB_NAME:-ai}
    networks:
      - expertmind
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  
  postgres_data:
    driver: local
    
  backend_node_modules:
    driver: local
  backend_app_node_modules:
    driver: local

networks:
  expertmind:
    driver: bridge
    name: expertmind-network
